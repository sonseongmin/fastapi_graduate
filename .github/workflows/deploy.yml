name: Build & Deploy Bodylog Backend

on:
  push:
    branches: ["main"]
    paths:
      - "app/**"
      - "alembic/**"
      - "alembic.ini"
      - "Dockerfile"
      - "requirements.txt"
      - ".github/workflows/deploy.yml"
      - ".dockerignore"
  workflow_dispatch:

concurrency:
  group: bodylog-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/bodylog-backend
  CONTAINER_NAME: bodylog-backend
  PORT: ${{ secrets.APP_PORT }}
  APP_ENV: ${{ secrets.APP_ENV }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract short SHA
        id: meta
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.SHORT_SHA }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Print & validate secrets (sanity)
        shell: bash
        run: |
          echo "EC2_HOST set? $([ -n '${{ secrets.EC2_HOST }}' ] && echo yes || echo no)"
          if [ -z "${{ secrets.EC2_HOST }}" ]; then echo 'EC2_HOST missing' && exit 1; fi
          if [ -z "${{ secrets.EC2_SSH_KEY_PEM }}" ] && [ -z "${{ secrets.EC2_SSH_KEY_BASE64 }}" ]; then
            echo 'Need EC2_SSH_KEY_PEM or EC2_SSH_KEY_BASE64' && exit 1
          fi
          echo "✅ secrets OK"

      - name: Prepare SSH key (prefer PEM, else BASE64)
        shell: bash
        run: |
          if [ -n "${{ secrets.EC2_SSH_KEY_PEM }}" ]; then
            printf "%s" "${{ secrets.EC2_SSH_KEY_PEM }}" > ssh_key.pem
          else
            printf "%s" "${{ secrets.EC2_SSH_KEY_BASE64 }}" | base64 -d > ssh_key.pem
          fi
          chmod 600 ssh_key.pem

      - name: Preflight: host up & port 22 open
        shell: bash
        run: |
          if ! timeout 3 bash -lc ">/dev/tcp/${{ secrets.EC2_HOST }}/22"; then
            echo "EC2 not reachable on 22/tcp" && exit 1
          fi

      - name: SSH ping (debug)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key_path: ssh_key.pem
          debug: true
          script_stop: true
          script: |
            echo "✅ SSH connected"
            whoami
            uname -a
            command -v docker && docker --version || echo "docker not found"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key_path: ssh_key.pem
          script_stop: true
          envs: IMAGE_NAME,CONTAINER_NAME,PORT,APP_ENV
          script: |
            set -euo pipefail
            IMAGE="${IMAGE_NAME}:latest"
            NAME="${CONTAINER_NAME}"
            PORT="${PORT:-8000}"

            docker pull "${IMAGE}" || true
            if [ "$(docker ps -aq -f name=^/${NAME}\$)" ]; then
              docker rm -f "${NAME}" || true
            fi

            ENV_FILE_OPT=""
            if [ -n "${APP_ENV:-}" ]; then
              echo "${APP_ENV}" > .env
              ENV_FILE_OPT="--env-file .env"
            fi

            docker run -d \
              --name "${NAME}" \
              -p "${PORT}:8000" \
              ${ENV_FILE_OPT} \
              --restart unless-stopped \
              "${IMAGE}"

            if docker exec "${NAME}" sh -lc 'command -v alembic >/dev/null 2>&1'; then
              docker exec "${NAME}" sh -lc 'alembic upgrade head' || true
            fi

            echo "✅ Deploy finished."
